After I made my first Algorithm, I was really glued to it. 
It was incredibly fun, and I wanted to tackle some more, bigger, and cooler algorithms. 
So, I decided this would be my 4th big C# project.

---------------------------------------------------

My focus (again) was on writing clean and good code so that others could easily work on it and add algorithms or other stuff.

Originally, I made the Maze Generation algorithm and the Right-Hand Rule algorithm as two separate console app prototypes. 
Then I decided to scale up to a WPF application with animations, controls, and even more algorithms. 
In the end, theres one gen algorithm and thtee solve algorithms (Random, RightWind and BFS).

It took me about 10 days, coding 4-6 hours a day, to bring the project to this point.


As always, I tried to do as much as possible myself. 
The generation, Random, and RightWind algorithms were all made 100% by myself (idea and coding) without any Googling. 
With the BFS, I only read an explanation of how it works and understood it very quickly. 
The implementation/coding was also done 100% by myself. 
It took me about 3 hours to understand and implement the BFS algorithm; the rest took A LOT longer because I had to think of the logic myself.


This is by far my best and coolest project I made to this day (July 18, 2025). 
Im very proud and think I managed to achieve my goals (mainly clean/better code). 
I believe the code is good enough for other people to work on, so please feel free to add something if you want! 
The project will also be upgraded soon; next, I want to add some sorting algorithms.


There's still one bug I couldnt really fix yet: If the animation runs (doesn't matter which one) and you focus something in the GUI (Text/ComboBox for example), 
the animation speeds up significantly while the GUI is focused. 
I guess its because of WPF prioritizing some threads, but I couldnt really figure it out yet.
The biggest struggle of the project wasnt even really the algorithms, but the GUI stuff. 
I had a lot of performance problems with big mazes but was able to fix most of it. 
And it (mostly) runs well now. If you have really long animations (solving a 1000x1000 maze), it starts lagging after a while. 
The only reason I can think of is that it saves/manages too much stuff, but theres not really THAT much that gets constantly saved.
Also, the program takes little to no RAM even when running, so idk what the problem really is.

---------------------------------------------------

I learned a lot in this project, especially about clean and maintainable code, and of course about algorithms (which I think I'm pretty good at understanding).

Like I said; if you want to add something to the program yourself, feel free to do that!